<<<<<<< Updated upstream
hackothon_dataset[grep("^METRO ", hackothon_dataset$desc.parsed),]$desc.parsed <- "METRO"
hackothon_dataset[grep("^SAQ ", hackothon_dataset$desc.parsed),]$desc.parsed <- "SAQ"
hackothon_dataset[grep("^SUPER C", hackothon_dataset$desc.parsed),]$desc.parsed <- "SUPER C"
hackothon_dataset[grep("^RENO DEPOT ", hackothon_dataset$desc.parsed),]$desc.parsed <- "RENO DEPOT"
hackothon_dataset[grep("^FIDO  ", hackothon_dataset$desc.parsed),]$desc.parsed <- "FIDO"
hackothon_dataset[grep("^DEPANNEUR  ", hackothon_dataset$desc.parsed),]$desc.parsed <- "DEPANNEUR"
# RONA?
# IGA?
# STM?
gsub("-", "", hackothon_dataset$desc.parsed) -> hackothon_dataset$desc.parsed
gsub("'", "", hackothon_dataset$desc.parsed) -> hackothon_dataset$desc.parsed
gsub(" +Q$", "", hackothon_dataset$desc.parsed) -> hackothon_dataset$desc.parsed
gsub(" +", "-", hackothon_dataset$desc.parsed) -> hackothon_dataset$desc.parsed
aggregate(desc.parsed ~ ID_CLIENT, hackothon_dataset, function(e) { paste(e, collapse=" ")}) -> bar
Corpus(VectorSource(bar$desc.parsed)) -> corpus
dtm <- DocumentTermMatrix(corpus,  control=list(bounds = list(global = c(2,Inf))))
gsub(" ", "-", hackothon_dataset$desc.parsed) -> hackothon_dataset$desc.parsed
heas(bar)
head(bar)
head(hackothon_dataset[ph==1])
str(hackothon_dataset)
head(hackothon_dataset[PH==1])
head(hackothon_dataset[PH==1,])
head(hackothon_dataset[PH=="1",])
head(hackothon_dataset[hackothon_dataset$PH=="1",])
hackothon_dataset[hackothon_dataset$PH=="1",]->hackothon_ph1
hackothon_dataset[hackothon_dataset$PH=="0",]->hackothon_ph0
aggregate(description.parsed ~ ID_CLIENT, hackothon_ph1, function(e) { paste(e, collapse=" ")}) -> bar1
aggregate(description.parsed ~ ID_CLIENT, hackothon_ph0, function(e) { paste(e, collapse=" ")}) -> bar0
gsub(" ", "-", hackothon_dataset$desc.parsed) -> hackothon_dataset$desc.parsed
hackothon_dataset[hackothon_dataset$PH=="1",]->hackothon_ph1
hackothon_dataset[hackothon_dataset$PH=="0",]->hackothon_ph0
aggregate(description.parsed ~ ID_CLIENT, hackothon_ph1, function(e) { paste(e, collapse=" ")}) -> bar1
aggregate(description.parsed ~ ID_CLIENT, hackothon_ph0, function(e) { paste(e, collapse=" ")}) -> bar0
str(hackothon_ph1)
aggregate(desc.parsed ~ ID_CLIENT, hackothon_ph1, function(e) { paste(e, collapse=" ")}) -> bar1
aggregate(desc.parsed ~ ID_CLIENT, hackothon_ph0, function(e) { paste(e, collapse=" ")}) -> bar0
Corpus(VectorSource(bar1$desc.parsed)) -> corpus1
dtm.tfidf1 <- DocumentTermMatrix(corpus1, control=list(weighting=weightTfIdf))
Corpus(VectorSource(bar0$desc.parsed)) -> corpus0
dtm.tfidf0 <- DocumentTermMatrix(corpus0, control=list(weighting=weightTfIdf))
dtm.tfidf1
dtm.tfidf1
dtm.tfidf0
dtm.tfidf <- DocumentTermMatrix(corpus, control=list(weighting=weightTfIdf))
dtm.tfidf
inspect(dtm.tfidf)
head(inspect(dtm.tfidf))
str(dtm.tfidf)
rownames(dtm.tfidf)
colnames(dtm.tfidf)
head(colnames(dtm.tfidf))
Corpus(DataframeSource(data.frame(docs=bar$desc.parsed,rownames=bar$ID_CLIENT)) -> corpus
Corpus(DataframeSource(data.frame(docs=bar$desc.parsed,rownames=bar$ID_CLIENT))) -> corpus
dtm.tfidf <- DocumentTermMatrix(corpus, control=list(weighting=weightTfIdf))
dtm.tfidf2=removeSparseTerms(dtm.tfidf, 0.99985)
rownames(dtm.tfidf)
Corpus(DataframeSource(data.frame(docs=bar$desc.parsed,row.names=bar$ID_CLIENT))) -> corpus
dtm.tfidf <- DocumentTermMatrix(corpus, control=list(weighting=weightTfIdf))
rownames(dtm.tfidf)
head(hackothon_dataset$desc.parsed)
dtm.tfidf <-DocumentTermMatrix(corpus, control=list(bounds = list(global = c(2,Inf)),weighting=weightTfIdf))dtm.tfidf2=removeSparseTerms(dtm.tfidf, 0.99985)
dtm.tfidf <-DocumentTermMatrix(corpus, control=list(bounds = list(global = c(2,Inf)),weighting=weightTfIdf))
dtm.tfidf
dtm.tfidf <-DocumentTermMatrix(corpus, control=list(bounds = list(global = c(2,Inf)),weighting=weightTfIdf))
str(hackothon_dataset).
str(hackothon_dataset)
findFreqTerms(dtm, 4)
findFreqTerms(dtm,2,3)
head(hackothon_dataset)
head(hackothon_dataset$PRIZM_SEGMENT)
str(hackothon_dataset$PRIZM_SEGMENT)
summary(hackothon_dataset$PRIZM_SEGMENT)
summary(as.factor(hackothon_dataset$PRIZM_SEGMENT))
level(as.factor(hackothon_dataset$PRIZM_SEGMENT))
str(as.factor(hackothon_dataset$PRIZM_SEGMENT))
str(hackothon_dataset)
aggregate(desc.parsed ~ PRIZM_LIFESTAGE, hackothon, function(e) { paste(e, collapse=" ")}) -> barbla
aggregate(desc.parsed ~ PRIZM_LIFESTAGE, hackothon_dataset, function(e) { paste(e, collapse=" ")}) -> barbla
aggregate(desc.parsed ~ PRIZM_LIFESTAGE, hackothon_dataset, function(e) { paste(e, collapse=" ")}) -> barbla
dtm.tfidf1 <- DocumentTermMatrix(corpusbla, control=list(weighting=weightTfIdf))
Corpus(VectorSource(barbla$desc.parsed)) -> corpusbla
dtm.tfidf1 <- DocumentTermMatrix(corpusbla, control=list(weighting=weightTfIdf))
dtm.tfidf1 <- DocumentTermMatrix(corpusbla, control=list(bounds = list(global = c(2,Inf)),weighting=weightTfIdf))
dtm.tfidf12=removeSparseTerms(dtm.tfidf, 0.99985)
findFreqTerms(dtm.tfidf12, 400)
dtm.tfidf1
dtm.tfidf12
dtm.tfidf12=removeSparseTerms(dtm.tfidf1, 0.99985)
findFreqTerms(dtm.tfidf12, 400)
findFreqTerms(dtm.tfidf12, 40
)
findFreqTerms(dtm.tfidf12, 4)
dtm.tfidf12
help(findFreqTerms)
findFreqTerms(dtm.tfidf12,1)
findFreqTerms(dtm.tfidf12,0)
aggregate(desc.parsed ~ PRIZM_LIFESTAGE, hackothon_dataset, function(e) { paste(e, collapse=" ")}) -> barbla
Corpus(DataframeSource(data.frame(docs=barbla$desc.parsed,row.names=barbla$ID_CLIENT))) -> corpus -> corpusbla
dtm.tfidf1 <- DocumentTermMatrix(corpusbla, control=list(bounds = list(global = c(2,Inf)),weighting=weightTfIdf))
dtm.tfidf12=removeSparseTerms(dtm.tfidf1, 0.99985)
dtm.tfidf12
findFreqTerms(dtm.tfidf12, 2)
dtm.tfidf1 <- DocumentTermMatrix(corpusbla, control=list(bounds = list(global = c(1,Inf)),weighting=weightTfIdf))
dtm.tfidf1 <- DocumentTermMatrix(corpusbla, control=list(bounds = list(weighting=weightTfIdf))
dtm.tfidf1 <- DocumentTermMatrix(corpusbla, control=list(bounds = list(weighting=weightTfIdf)))
dtm.tfidf1 <- DocumentTermMatrix(corpusbla, control=list(bounds = list(weighting=weightTfIdf)))
dtm.tfidf12=removeSparseTerms(dtm.tfidf1, 0.99985)
findFreqTerms(dtm.tfidf12, 2)
=======
>>>>>>> Stashed changes
1
str(dtm.tfidf1)
bears=readHTMLTable("http://www.chicagobears.com/team/statistics.html")
library(XML)
bears=readHTMLTable("http://www.chicagobears.com/team/statistics.html")
library(data.table)
library(data.table)
bears=data.table(bears)
view(bears)
View(bears)
head(bears)
STR(bears)
str(bears)
names(bears)
bears[1]
bears[[1]]
lapply(bears,typeof)
lapply(bears[[1]],typeof)
lapply(bears[[1]][[3]],typeof)
bears[[1]][[3]]
lapply(split(bears,bears$v1),funtion(x) sum(x))
lapply(split(bears,bears$v1),funtion(x) sum(x$v2))
lapply(split(bears,bears$v1),sum(x))
lapply(split(bears,bears$v1),function(x)sum(x))
lapply(split(bears,bears$v1),function(x)sum(x$v2))
split(bears,bears$v1)
lapply(split(bears,bears[[3]]$v1),function(x)sum(x$v2))
bears[[1]][[3]]
lapply(split(bears,bears[[1]][[3]]$v1),function(x)sum(x$v2))
lapply(split(bears,bears[[1]][[3]]$v1),function(x) mean(x$v2))
split(bears,bears[[1]][[3]]$v1)
lapply(split(bears,bears[[1]][[3]]$V1),function(x) mean(x$V2))
lapply(split(bears,bears[[1]][[3]]$V1),function(x) sum(x$V2))
bears[[1]][[3]]
bears,bears[[1]][[3]]$V1)
lapply(split(bears[[1]][[3]],bears[[1]][[3]]$V1),function(x) sum(x$V2))
bears[[1]][[3]],bears[[1]][[3]]$V1)
split(bears[[1]][[3]],bears[[1]][[3]]$V1)
lapply(split(bears[[1]][[3]],bears[[1]][[3]]$V1),function(x) x$V2))
lapply(split(bears[[1]][[3]],bears[[1]][[3]]$V1),function(x) x$V2)
lapply(split(bears[[1]][[3]],bears[[1]][[3]]$V1),function(x) sum(x$V2))
lapply(split(bears[[1]][[3]],bears[[1]][[3]]$V1),function(x) x$V2)
help(fread)
1+1
require(data.tabe)
require(data.table)
help(fread)
bears_roster=readHTMLTable("http://www.chicagobears.com/team/roster.html")
library(XML)
library(data.table)
bears_roster=readHTMLTable("http://www.chicagobears.com/team/roster.html")
bears_statistics=readHTMLTable("http://www.chicagobears.com/team/statistics.html")
View(bears_statistics)
str(bears_statistics)
bears_injury=readHTMLTable("http://www.chicagobears.com/team/injury-report.html")
str(bears_ijury)
str(bears_injury)
data_sport= fread(file.choose())
data_titanic= fread(file.choose())
data_titanic= fread(file.choose())
fread("sed 's/\\0//g' C:\\Users\\Herve\\Dropbox\Projet\\Supervised Project\\credit_assoc.xls")
fread("sed 's/\\0//g' C:\\Users\\Herve\\Dropbox\\Projet\\Supervised Project\\credit_assoc.xls")
fread("file.choose()")
fread(file.choose())
fread("file.choose()")
fread(file.choose())
fread(file.choose())
data_cancer=fread(file.choose())
data_cancer=fread(file.choose())
data_cancer=fread(file.choose())
fread(file.choose())
data_fleurs= fread("C:\\Users\\Herve\\Dropbox\\Projet\\Supervised Project\\irisidata.txt")
data_fleurs= fread("C:\\Users\\Herve\\Dropbox\\Projet\\Supervised Project\\irisdata.txt")
str(data_fleurs)
data_fleurs
data_fleurs= fread("C:\\Users\\Herve\\Dropbox\\Projet\\Supervised Project\\irisdata.txt")
require(data.table)
help(fread)
data_fleurs= fread("C:\\Users\\Herve\\Dropbox\\Projet\\Supervised Project\\irisdata.txt")
setnames(data_fleurs,c("V1","V2","V3","V4","V5"),c("long_p","larg_p","long_o","larg_o","type"))
data_fleurs[,type,with=false]
data_fleurs[,type,with=false]
str(data.fleurs)
str(data_fleurs)
data_fleurs[,.(V1,V2)]
data_fleurs[,(V1,V2)]
data_fleurs-data.table(data_fleurs)
data_fleurs=data.table(data_fleurs)
data_fleurs[,.(V1,V2)]
data_fleurs[,(V1,V2)]
data_fleurs[,]
data_fleurs[,.TYPE]
data_fleurs[,sum(long_o]
data_fleurs[,sum(long_o)]
data_fleurs[,1:3]
data_fleurs[,type]
data_fleurs[,c(type, long_o)]
data_fleurs[,.c(type, long_o)]
data_fleurs[,.(type, long_o)]
data_fleurs[,type, long_o]
data_fleurs[,1,2]
data_fleurs[,(type, long_o)]
data_fleurs[(type, long_o)]
data_fleurs[c(type, long_o)]
data_fleurs[.(type,long_o),]
data_fleurs[,.(type,long_o)]
data_fleurs[, .(type,long_o)]
library
(
data.table
)
set.seed(
45
L)
DT
<
-
data.table
(
V1
=
c
(
1
L,
2
L
)
,
V2
=
LETTERS
[
1
:
3
]
,
V3
=
round
(
rnorm
(
4
)
,
4
)
,
V4
=
1
:
12
set.seed(45L)
data_fleurs[, .(type)]
data_fleurs[, ,.(type)]
data_fleurs[,mean(lonp_p) ,.(type)]
data_fleurs[,mean(lonp_p) ,type)]
data_fleurs[,mean(long_p) ,type)]
data_fleurs[,mean(long_p) ,type]
data_fleurs[long_p>6.5,mean(long_p) ,type]
data_fleurs[long_p>5.5,mean(long_p) ,type]
head(data_fleurs[,(long_p,type)])
head(data_fleurs[,list(long_p,type)])
library(XML)
library(data.table)
bears_statistics=readHTMLTable("http://www.chicagobears.com/team/statistics.html")
bears_roster=readHTMLTable("http://www.chicagobears.com/team/roster.html")
bears_injury=readHTMLTable("http://www.chicagobears.com/team/injury-report.html")
str(bears_injury)
library(XML)
library(data.table)
library(ggplot)
library(ggplot2)
library(ggplot2)
300+90+170+230+40+700
1530+200+60+60+60+30+100+150+35+100+50+200+50
library(grid)
installed.packaged[,1]
installed.package[,1]
installed.packages[,1]
installed.packages()
installed.packages()[,1]
installed.packages()[,1]
duproprio=getURL("http://duproprio.com/search/?hash=/g-re=6/s-pmin=0/s-pmax=99999999/s-build=1/s-days=0/s-filter=forsale/s-hide-sold=/s-mode=list/p-con=main/p-ord=date/p-dir=DESC/pa-ge=1")
library(XML)
library(data.table)
library(ggplot2)
library(grid)
library(gplot2)
installed.packages()[,1]
duproprio=getURL("http://duproprio.com/search/?hash=/g-re=6/s-pmin=0/s-pmax=99999999/s-build=1/s-days=0/s-filter=forsale/s-hide-sold=/s-mode=list/p-con=main/p-ord=date/p-dir=DESC/pa-ge=1")
library(XML)
duproprio=getURL("http://duproprio.com/search/?hash=/g-re=6/s-pmin=0/s-pmax=99999999/s-build=1/s-days=0/s-filter=forsale/s-hide-sold=/s-mode=list/p-con=main/p-ord=date/p-dir=DESC/pa-ge=1")
all_team_script=getURL("http://www.sports-reference.com/cbb/schools/")
library(XML)
library(data.table)
library(ggplot2)
library(grid)
duproprio=getURL("http://duproprio.com/search/?hash=/g-re=6/s-pmin=0/s-pmax=99999999/s-build=1/s-days=0/s-filter=forsale/s-hide-sold=/s-mode=list/p-con=main/p-ord=date/p-dir=DESC/pa-ge=1")
library(RCurl)
library(gplot2)
installed.packages()[,1]
duproprio=getURL("http://duproprio.com/search/?hash=/g-re=6/s-pmin=0/s-pmax=99999999/s-build=1/s-days=0/s-filter=forsale/s-hide-sold=/s-mode=list/p-con=main/p-ord=date/p-dir=DESC/pa-ge=1")
duproprio_doc=htmlParse(duproprio)
duproprio_nodes=getNodeSet(duproprio_doc,"//div[@id='contentSearchResults']//h4//a")
duproprio_nodes
duproprio_html=lapply(duprorpio_vec,xmlGetAttr,"href")
duproprio_html=lapply(duproprio_nodes,xmlGetAttr,"href")
duproprio_html=do.call(rbind,duproprio_html)
duproprio_html
str(duproprio_html)
names(duproprio_html)[,1]="URL"
names(duproprio_html)
duproprio_html=data.table(do.call(rbind,duproprio_html))
duproprio_html=lapply(duproprio_nodes,xmlGetAttr,"href")
duproprio_html_2=data.table(do.call(rbind,duproprio_html))
str(duproprio_html_2)
stenames(duproprio_html_2,"V1",URL)
setnames(duproprio_html_2,"V1",URL)
setnames(duproprio_html_2,"V1","URL")
str(duproprio_html_2)
duproprio_html_2$URL=ac.character(duproprio_html_2$URL)
duproprio_html_2$URL=as.character(duproprio_html_2$URL)
str(duproprio_html_2)
duproprio_html_2$URL=paste("http://duproprio.com/",as.character(duproprio_html_2$URL))
duproprio_html_2
duproprio=getURL("http://duproprio.com/search/?hash=/g-re=6/s-pmin=0/s-pmax=99999999/s-build=1/s-days=0/s-filter=forsale/s-hide-sold=/s-mode=list/p-con=main/p-ord=date/p-dir=DESC/pa-ge=1")
duproprio_doc=htmlParse(duproprio)
duproprio_nodes=getNodeSet(duproprio_doc,"//div[@id='contentSearchResults']//h4//a")
duproprio_html=lapply(duproprio_nodes,xmlGetAttr,"href")
duproprio_html_2=data.table(do.call(rbind,duproprio_html))
str(duproprio_html_2)
setnames(duproprio_html_2,"V1","URL")
duproprio_html_2$URL=paste("http://duproprio.com",as.character(duproprio_html_2$URL),sep="")
duproprio_html_2
duproprio_html_2$URL[,1]
duproprio_html_2$URL[1]
getURL(duproprio_html_2$URL[1])
one_link=getURL(duproprio_html_2$URL[1])
onelink_doc=htmlParse(one_link)
onelink_nodes=getNodeSet(onelink_doc,"//div[@id='remarques']//div[@class='content']//p")
onelink_remarques=lapply(onelink_nodes,xmlValue)
onelink_remarques
onelink_remarques_2=data.table(do.call(rbind,onelink_remarques))
onelink_remarques_2
onelink_nodes2=getNodeSet(onelink_doc,"//div[@id='listingContent']//h3[@class='outsideBox']")
onelink_id_street=lapply(onelink_nodes2,xmlValue)
onelink_id_street
library(data.table)
data= fread(file.choose(),sep="\t")
data= fread(file.choose(),sep="\t",nrows=500)
data
ads_info=fread("C:\\Users\\Herve\\Downloads\\AdsInfo.tsv",sep="\t",nrows=5000)
train_Search_Stream= fread("C:\\Users\\Herve\\Downloads\\trainSearchStream.tsv",sep="\t",nrows=5000)
search_info=fread("C:\\Users\\Herve\\Downloads\\SearchInfo.tsv",sep="\t",nrows=5000)
visit_stream=fread("C:\\Users\\Herve\\Downloads\\VisitStream.tsv",sep="\t",nrows=5000)
user_info=fread("C:\\Users\\Herve\\Downloads\\UserInfo.tsv",sep="\t",nrows=5000)
write.table(train_Search_Stream,"C:\\Users\\Herve\\Documents\\train_Search_Stream.txt")
write.table(search_info,"C:\\Users\\Herve\\Documents\\search_info.txt")
write.table(visit_stream,"C:\\Users\\Herve\\Documents\\visit_stream.txt")
write.table(user_info,"C:\\Users\\Herve\\Documents\\user_info.txt")
write.table(ads_info,"C:\\Users\\Herve\\Documents\\ads_info.txt")
search_info=fread("C:\\Users\\Herve\\Downloads\\SearchInfo.tsv",sep="\t",nrows=5000)
visit_stream=fread("C:\\Users\\Herve\\Downloads\\VisitStream.tsv",sep="\t",nrows=5000)
user_info=fread("C:\\Users\\Herve\\Downloads\\UserInfo.tsv",sep="\t",nrows=5000)
write.table(train_Search_Stream,"C:\\Users\\Herve\\Documents\\train_Search_Stream.txt")
write.table(search_info,"C:\\Users\\Herve\\Documents\\search_info.txt")
write.table(visit_stream,"C:\\Users\\Herve\\Documents\\visit_stream.txt")
write.table(user_info,"C:\\Users\\Herve\\Documents\\user_info.txt")
write.table(ads_info,"C:\\Users\\Herve\\Documents\\ads_info.txt")
search_info
visit_stream
user_info
ads_info
train_Search_Stream
visit_stream=fread("C:\\Users\\Herve\\Downloads\\VisitsStream.tsv",sep="\t",nrows=5000)
write.table(visit_stream,"C:\\Users\\Herve\\Documents\\visit_stream.txt")
visit_stream
ln(0.09/.14)
log(0.09/.14,base=exp(1))
(0.09-.14)log(0.09/.14,base=exp(1))
(0.09-.14)*log(0.09/.14,base=exp(1))
train_Search_Stream=read.table("C:\\Users\\Herve\\Documents\\train_Search_Stream.txt",header=TRUE)
train_Search_Stream=data.table(read.table("C:\\Users\\Herve\\Documents\\train_Search_Stream.txt",header=TRUE))
ads_info=data.table(read.table("C:\\Users\\Herve\\Documents\\ads_info.txt",header=TRUE))
visit_stream=data.table(read.table("C:\\Users\\Herve\\Documents\\visit_stream.txt",header=TRUE))
search_info=data.table(read.table("C:\\Users\\Herve\\Documents\\search_info.txt",header=TRUE))
user_info=data.table(read.table("C:\\Users\\Herve\\Documents\\user_info.txt",header=TRUE))
visit_stream=data.table(read.table("C:\\Users\\Herve\\Documents\\visit_stream.txt",header=TRUE))
library(data.table)
train_Search_Stream=data.table(read.table("C:\\Users\\Herve\\Documents\\train_Search_Stream.txt",header=TRUE))
ads_info=data.table(read.table("C:\\Users\\Herve\\Documents\\ads_info.txt",header=TRUE))
visit_stream=data.table(read.table("C:\\Users\\Herve\\Documents\\visit_stream.txt",header=TRUE))
search_info=data.table(read.table("C:\\Users\\Herve\\Documents\\search_info.txt",header=TRUE))
user_info=data.table(read.table("C:\\Users\\Herve\\Documents\\user_info.txt",header=TRUE))
visit_stream=data.table(read.table("C:\\Users\\Herve\\Documents\\visit_stream.txt",header=TRUE))
visit_stream
visit_stream
user_info
search_info
train_Search_Stream
summary(train_Search_Stream)
user_info
ads_info=fread("C:\\Users\\Herve\\Downloads\\AdsInfo.tsv",sep="\t",nrows=25000)
train_Search_Stream= fread("C:\\Users\\Herve\\Downloads\\trainSearchStream.tsv",sep="\t",nrows=25000)
search_info=fread("C:\\Users\\Herve\\Downloads\\SearchInfo.tsv",sep="\t",nrows=25000)
user_info=fread("C:\\Users\\Herve\\Downloads\\UserInfo.tsv",sep="\t",nrows=25000)
visit_stream=fread("C:\\Users\\Herve\\Downloads\\VisitsStream.tsv",sep="\t",nrows=25000)
str(train_Search_Stream)
str(search_info)
summary(train_Search_Stream$IsClick)
sum(train_Search_Stream$IsClick)
sum(train_Search_Stream$IsClick,na.rm = TRUE)
library(randomForest)
library(rpart)
library(adabag)
library(caret)
library(ggplot2)
search_info
nrow(unique(search_info$LocationID))
unique(search_info$LocationID)
length(unique(search_info$LocationID))
sum(search_info$IsUserLoggedOn,na.rm = TRUE)
sum(search_info$IsUserLoggedOn,na.rm = FALSE)
search_info$SearchParams
length(unique(search_info$SearchCategoyID)
visit_stream
visit_stream
bla=fread(file.choose(),header=TRUE)
bla
setkey(bla,"Id")
setkey(bla,"ID")
setkeyv(train_Search_Stream,"AdID")
merge(bla,train_Search_Stream)
bla$AdID=bla$ID
setkey(bla,"AdID")
merge(bla,train_Search_Stream, by=adID)
merge(bla,train_Search_Stream, by=AdID)
str(bla))
str(bla)
setkey(train_Search_Stream,"AdID")
merge(bla,train_Search_Stream, by=AdID)
merge(bla,train_Search_Stream, by="AdID")
sum(bla$Isclick)
bla
length(unique(visit_stream$UserId))
nrow(unique(visit_stream$UserId))
visit_stream
length(unique(visit_stream$UserId))
unique(visit_stream$UserId)
visit_stream$UserId
length(unique(visit_stream$UserI))
str(visit_stream)
length(unique(visit_stream$UserID))
length(unique(search_stream$SearchID))
length(unique(train_Search_Stream$SearchID))
bla
length(bla$ID)
ads_info
bla
bla2=fread(file.choose(),header=TRUE)
bla2
setwd("C:\\Users\\Herve\\Documents\\Projets\\Kaggle---Kijiji-Russia")
# train_Search_Stream=data.table(read.table("train_Search_Stream_2.txt",header=TRUE))
train_Search_Stream=data.table(read.table("train_Search_Stream_2.txt",header=TRUE))
library(data.table)
train_Search_Stream=data.table(read.table("train_Search_Stream_2.txt",header=TRUE))
train_Search_Stream=data.table(read.table("train_Search_Stream_2.txt",header=TRUE))
ads_info=data.table(read.table("ads_info_2.txt",header=TRUE))
visit_stream=data.table(read.table("visit_stream_2.txt",header=TRUE))
search_info=data.table(read.table("search_info_2.txt",header=TRUE))
user_info=data.table(read.table("user_info_2.txt",header=TRUE))
user_info=data.table(read.table("category_2.txt",header=TRUE))
user_info=data.table(read.table("location_2.txt",header=TRUE))
library(reshape2)
library(reshape2)
library(data.table)
library(xlsx)
library(lubridate)
library(xts)
library(quantmod)
library(reshape2)
library(stringr)
library(data.table)
user_info=data.table(read.table("user_info_2.txt",header=TRUE))
category=data.table(read.table("category_2.txt",header=TRUE))
location=data.table(read.table("location_2.txt",header=TRUE))
phone_request=data.table(read.table("phone_request_2.txt",header=TRUE))
phone_request
location
category
setkey(train_Search_Stream, "SearchID","AdID")
setkey(ads_info, "AdID")
setkey(visit_stream, "UserID")
setkey(search_info, "SearchID","UserID")
essaie=merge(train_Search_Stream,search_info)
essaie
setkey(essaie,"AdID")
essaie2=merge(essaie,ads_info)
essaie2
<<<<<<< Updated upstream
=======
essaie
essaie2=merge(essaie,ads_info)
essaie2
debut=proc.time()
fin=proc.time()
debut-fin
fin-debut
debut=proc.time()
debut
fin=proc.time()
fin-debut
(fin-debut)$elapsed
str(fin)
setwd("C:\\Users\\Herve\\Documents\\Projets\\Kaggle---Kijiji-Russia")
setwd("C:\\Users\\Herve\\Documents\\Projets\\Kaggle---Kijiji-Russia")
ls()
rm(list=ls())
ls()
gc()
ls()
library(xlsx)
library(lubridate)
library(xts)
library(quantmod)
library(reshape2)
library(stringr)
library(data.table)
setwd("/Users/romainbui/Kaggle---Kijiji-Russia")
customRead = function(x)
{
names.res = str_split(gsub(pattern = "\"","",readLines(x, n = 1)), " ")[[1]]
res = fread(x, sep = " ")
res = res[,V1:=NULL]
setnames(res, names.res)
return(res)
}
Search.Stream = customRead("train_Search_Stream_2.txt")
Search.Info   = customRead("search_info_2.txt")
AD.Info       = customRead("ads_info_2.txt")
User.Info     = customRead("user_info_2.txt")
User.Info[,UserID := as.numeric(UserID)]
Visits.Stream = customRead("visit_stream_2.txt")
setkey(Visits.Stream, "UserID")
# Creation of the big dataTable
mainTable = merge(merge(merge(Search.Stream, Search.Info, by = "SearchID", all.x = T), User.Info, by = "UserID", all.x = T), AD.Info, by = "AdID", all.x = T)
# For a given user ID
userSpe = merge(Visits.Stream, AD.Info, by = "AdID", all.x = T)
topN = function(X, By, N = 3)
{
res = data.frame(X, By)
res = res[rev(order(By)),]
return(as.list(res$X[1:N]))
}
createName = function(names, N = 3)
{
a = as.vector(sapply(names, rep, times = N))
b = rep(c(1:N), length(names))
return(paste0(a,b))
}
# Create the new Column of the 3 Top AdID for the user Specific
myMerge = function(x,y){merge(x,y, by = "UserID")}
userSpeM = Reduce(myMerge, list(userSpe[,topN(ViewDate, ViewDate),UserID],
userSpe[,topN(AdID, ViewDate), UserID],
userSpe[,topN(LocationID, ViewDate), UserID]))
setNames(userSpeM, c("UserID", createName(c("ViewDate", "AdID", "LocationID"))))
userSpeM
mainTable = merge(mainTable, userSpeM, by = "UserID", all.x = T)
>>>>>>> Stashed changes
